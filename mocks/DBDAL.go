// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	model "github.com/fgunawan1995/lemonilo/model"
	mock "github.com/stretchr/testify/mock"

	sqlx "github.com/jmoiron/sqlx"

	util "github.com/fgunawan1995/lemonilo/util"
)

// DBDAL is an autogenerated mock type for the DBDAL type
type DBDAL struct {
	mock.Mock
}

// DeleteUser provides a mock function with given fields: tx, userID
func (_m *DBDAL) DeleteUser(tx util.Transaction, userID string) error {
	ret := _m.Called(tx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(util.Transaction, string) error); ok {
		r0 = rf(tx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDB provides a mock function with given fields:
func (_m *DBDAL) GetDB() *sqlx.DB {
	ret := _m.Called()

	var r0 *sqlx.DB
	if rf, ok := ret.Get(0).(func() *sqlx.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.DB)
		}
	}

	return r0
}

// GetUserByEmail provides a mock function with given fields: email
func (_m *DBDAL) GetUserByEmail(email string) (model.User, error) {
	ret := _m.Called(email)

	var r0 model.User
	if rf, ok := ret.Get(0).(func(string) model.User); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: userID
func (_m *DBDAL) GetUserByID(userID string) (model.User, error) {
	ret := _m.Called(userID)

	var r0 model.User
	if rf, ok := ret.Get(0).(func(string) model.User); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUserID provides a mock function with given fields: userID
func (_m *DBDAL) GetUserByUserID(userID string) (model.User, error) {
	ret := _m.Called(userID)

	var r0 model.User
	if rf, ok := ret.Get(0).(func(string) model.User); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertUser provides a mock function with given fields: tx, data
func (_m *DBDAL) InsertUser(tx util.Transaction, data model.InsertUser) error {
	ret := _m.Called(tx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(util.Transaction, model.InsertUser) error); ok {
		r0 = rf(tx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: tx, data
func (_m *DBDAL) UpdateUser(tx util.Transaction, data model.UpdateUser) error {
	ret := _m.Called(tx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(util.Transaction, model.UpdateUser) error); ok {
		r0 = rf(tx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
