// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	model "github.com/fgunawan1995/lemonilo/model"
	mock "github.com/stretchr/testify/mock"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// DeleteUser provides a mock function with given fields: userID
func (_m *Usecase) DeleteUser(userID string) error {
	ret := _m.Called(userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserByID provides a mock function with given fields: userID
func (_m *Usecase) GetUserByID(userID string) (model.User, error) {
	ret := _m.Called(userID)

	var r0 model.User
	if rf, ok := ret.Get(0).(func(string) model.User); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertUser provides a mock function with given fields: data
func (_m *Usecase) InsertUser(data model.InsertUser) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.InsertUser) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Login provides a mock function with given fields: data
func (_m *Usecase) Login(data model.Login) (string, error) {
	ret := _m.Called(data)

	var r0 string
	if rf, ok := ret.Get(0).(func(model.Login) string); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Login) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: data
func (_m *Usecase) UpdateUser(data model.UpdateUser) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.UpdateUser) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
